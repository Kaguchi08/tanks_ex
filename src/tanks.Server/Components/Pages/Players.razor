@page "/admin/players"
@using Tanks.Server.Services
@inject IPlayerManagerService PlayerManager
@rendermode InteractiveServer

<PageTitle>„Éó„É¨„Ç§„É§„ÉºÁÆ°ÁêÜ - Tanks Game</PageTitle>

<div class="players-management">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-6 mb-3">üë• „Éó„É¨„Ç§„É§„ÉºÁÆ°ÁêÜ</h1>
            <p class="text-muted">Êé•Á∂ö‰∏≠„ÅÆ„Éó„É¨„Ç§„É§„Éº„Å®„Ç≤„Éº„É†ÂèÇÂä†ËÄÖ„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åô</p>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <h5 class="text-primary">@players.Count</h5>
                    <p class="text-muted mb-0">Êé•Á∂ö‰∏≠„Éó„É¨„Ç§„É§„Éº</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <h5 class="text-success">@PlayerManager.GetTotalConnectionCount()</h5>
                    <p class="text-muted mb-0">Á∑èÊé•Á∂öÊï∞</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <h5 class="@(PlayerManager.IsGameReady() ? "text-success" : "text-warning")">
                        @(PlayerManager.IsGameReady() ? "Ê∫ñÂÇôÂÆå‰∫Ü" : "ÂæÖÊ©ü‰∏≠")
                    </h5>
                    <p class="text-muted mb-0">„Ç≤„Éº„É†Áä∂ÊÖã</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Players Table -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Êé•Á∂ö‰∏≠„Éó„É¨„Ç§„É§„Éº‰∏ÄË¶ß</h5>
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshPlayers">
                        <i class="bi bi-arrow-clockwise"></i> Êõ¥Êñ∞
                    </button>
                </div>
                <div class="card-body p-0">
                    @if (players.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>„Éó„É¨„Ç§„É§„ÉºID</th>
                                        <th>„Éó„É¨„Ç§„É§„ÉºÂêç</th>
                                        <th>Êé•Á∂öID</th>
                                        <th>Êé•Á∂öÊôÇÈñì</th>
                                        <th>Áä∂ÊÖã</th>
                                        <th>„Ç¢„ÇØ„Ç∑„Éß„É≥</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var player in players)
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-primary">#@player.PlayerID</span>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-circle me-2">
                                                        @player.PlayerName.Substring(0, 1).ToUpper()
                                                    </div>
                                                    <span class="fw-semibold">@player.PlayerName</span>
                                                </div>
                                            </td>
                                            <td>
                                                <code class="small">@player.ConnectionId</code>
                                            </td>
                                            <td>
                                                <span class="text-muted small">@DateTime.Now.ToString("HH:mm:ss")</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-success">„Ç™„É≥„É©„Ç§„É≥</span>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-info" @onclick="() => ViewPlayerDetails(player)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="() => KickPlayer(player)">
                                                        <i class="bi bi-person-x"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-people display-1 text-muted"></i>
                            <p class="text-muted mt-3">ÁèæÂú®Êé•Á∂ö‰∏≠„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅØ„ÅÑ„Åæ„Åõ„Çì</p>
                            <button class="btn btn-primary" @onclick="RefreshPlayers">
                                <i class="bi bi-arrow-clockwise me-1"></i>Êõ¥Êñ∞
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Player Details Modal (placeholder) -->
    @if (selectedPlayer != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">„Éó„É¨„Ç§„É§„ÉºË©≥Á¥∞</h5>
                        <button type="button" class="btn-close" @onclick="ClosePlayerDetails"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>„Éó„É¨„Ç§„É§„ÉºID:</strong> @selectedPlayer.PlayerID<br />
                                <strong>„Éó„É¨„Ç§„É§„ÉºÂêç:</strong> @selectedPlayer.PlayerName<br />
                                <strong>Êé•Á∂öID:</strong> @selectedPlayer.ConnectionId
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePlayerDetails">Èñâ„Åò„Çã</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .avatar-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(45deg, #007bff, #6610f2);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
    }
</style>

@code {
    private List<Tanks.Shared.TankGamePlayer> players = new();
    private Tanks.Shared.TankGamePlayer? selectedPlayer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshPlayers();
    }

    private async Task RefreshPlayers()
    {
        try
        {
            var serverPlayers = PlayerManager.GetAllPlayers();
            players = serverPlayers.ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            players = new List<Tanks.Shared.TankGamePlayer>();
        }
    }

    private void ViewPlayerDetails(Tanks.Shared.TankGamePlayer player)
    {
        selectedPlayer = player;
        StateHasChanged();
    }

    private void ClosePlayerDetails()
    {
        selectedPlayer = null;
        StateHasChanged();
    }

    private async Task KickPlayer(Tanks.Shared.TankGamePlayer player)
    {
        try
        {
            await PlayerManager.RemovePlayerAsync(player.ConnectionId);
            await RefreshPlayers();
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }
}